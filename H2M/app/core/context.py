import logging
from typing import List, Dict, Optional
import uuid

from app.services.ignite_client import ignite_client

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ContextManager:
    """
    Manages the context and history of conversations.
    """

    async def get_or_create_conversation_history(self, conversation_id: Optional[str]) -> (str, List[Dict]):
        """
        Retrieves the history for a conversation, or creates a new one if no ID is provided.

        Args:
            conversation_id: The ID of the conversation to retrieve.

        Returns:
            A tuple containing the conversation ID and the list of messages.
        """
        if not conversation_id:
            conversation_id = str(uuid.uuid4())
            logger.info(f"No conversation_id provided. Created new one: {conversation_id}")
            return conversation_id, []

        history = await ignite_client.get_history(conversation_id)
        if history is None:
            logger.warning(f"No history found for conversation_id {conversation_id}. Starting new history.")
            return conversation_id, []
        
        return conversation_id, history

    async def add_message_to_history(self, conversation_id: str, user_message: str, ai_message: str):
        """
        Adds a user message and an AI response to the conversation history.

        Args:
            conversation_id: The ID of the conversation.
            user_message: The message sent by the user.
            ai_message: The response generated by the AI.
        """
        _id, history = await self.get_or_create_conversation_history(conversation_id)

        history.append({"role": "user", "content": user_message})
        history.append({"role": "assistant", "content": ai_message})

        # A more advanced implementation might truncate old messages
        # to keep the context window from growing too large.

        await ignite_client.save_history(conversation_id, history)
        logger.info(f"Appended messages to history for conversation {conversation_id}.")

# Global instance for the application
context_manager = ContextManager() 